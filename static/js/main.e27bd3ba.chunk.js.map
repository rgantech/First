{"version":3,"sources":["components/About.js","components/Alert.js","components/Nav.js","components/Service.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","style","color","mode","className","sstyle","id","type","onClick","abtfun","titlebtn","Alert","alertmsg","role","word","lower","toLowerCase","charAt","toUpperCase","slice","captilize","msg","Nav","clsnm","href","title","textlight","addcls","enableyellow","myfunname","htmlFor","darkmodestatus","Service","useState","mytext","updateText","onChange","event","target","value","rows","disabled","uptext","showalert","btnclr","lowertext","remsptxt","replace","length","split","defaultProps","about","App","setMode","statusofMode","setstatusofMode","stastatusofText","setstatusofText","btntitle","darkModeButtonText","backgroundColor","myStyle","darkModeFun","alertMsg","setalertMsg","chkmode","chkmodestate","passclass","myclassname","addrootclass","addrootclassylw","funnameyellow","setyellow","btnColrs","buttoncolrs","message","setTimeout","document","body","bkgcolr","chk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e27bd3ba.chunk.js","sourcesContent":["//import React, {useState} from 'react'\r\n//import Button from './Button'\r\n\r\n\r\nexport default function About(props) {\r\n\r\n    \r\n\r\n    \r\n\r\n    return (\r\n      <>\r\n      <h1 style={{ color: props.mode==='dark'?'red':'black' }}>About Us</h1>\r\n        <div className=\"container py-5\" style={props.sstyle} >\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n  <div className=\"accordion-item\" style={props.sstyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingOne\" style={props.sstyle}>\r\n      <button style={props.sstyle} className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" style={props.sstyle} className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div className=\"accordion-item\" style={props.sstyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingThree\" style={props.sstyle}>\r\n      <button style={props.sstyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" style={props.sstyle} className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container\">\r\n<button type=\"button\" onClick={props.abtfun} className=\"mx-2 my-3 btn btn-primary\">{props.titlebtn}</button>\r\n</div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n  const captilize = (word) => {\r\n\r\n   const lower = word.toLowerCase();\r\n   return lower.charAt(0).toUpperCase() + lower.slice(1); \r\n\r\n  }\r\n\r\n    return (\r\n       props.alertmsg && <div className={`alert alert-${props.alertmsg.type} alert-primary`} role=\"alert\">\r\n       <strong>{captilize(props.alertmsg.type)}:</strong> {props.alertmsg.msg}\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\n\r\nexport default function Nav(props) {\r\n\r\n \r\n\r\n    return (\r\n    \r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} ${props.clsnm}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n              </li> */}\r\n              \r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">Services</a>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n\r\n{/* <div className={`form-check colo-pal form-switch ${props.textlight}`} >\r\n  <input checked={props.chk} className={`foryellowpalt form-check ${props.addcls}`} type=\"radio\" role=\"switch\" id=\"flexSwitchCheckDefault\" \r\n  onClick={props.enableyellow} style={props.bkgcolr}/>  \r\n</div> */}\r\n\r\n<div className={`form-check form-switch ${props.textlight}`}>\r\n  <input className={`foryellowpalt form-check-input ${props.addcls}`} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.enableyellow}/>\r\n \r\n</div>\r\n\r\n\r\n<div className={`form-check form-switch ${props.textlight}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.myfunname}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.darkmodestatus}</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n     \r\n    )\r\n}\r\n\r\nNav.propTypes = {\r\n    title: PropTypes.string,\r\n}\r\n\r\nNav.defaultProps = {\r\n    about: \"About me\"\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\n//import Button from './Button';\r\n\r\nexport default function Service(props) {\r\n\r\n    \r\n\r\n    const runmyFun = () => {\r\n        let uptext = mytext.toUpperCase();\r\n        updateText(uptext);\r\n        props.showalert('Text converted to uppercase','success');\r\n        \r\n        \r\n    }\r\n\r\n    const convertoCap = () => {\r\n        let lowertext = mytext.toLowerCase();\r\n        updateText(lowertext);\r\n        props.showalert('Text converted to lowercase','success');\r\n    }\r\n\r\n    const removeSpace = () => {\r\n        let remsptxt = mytext.replace(/\\s/g,'')\r\n        updateText(remsptxt);\r\n    }\r\n    const handleClearText = (event) => {\r\n      updateText('');\r\n      props.showalert('Textarea cleared','success');\r\n   \r\n    }\r\n    \r\n\r\n    const handleOnChange = (event) => {\r\n        updateText(event.target.value);\r\n    }\r\n\r\n    const [mytext, updateText] = useState('Enter the text');\r\n   \r\n\r\n    return (\r\n    <>\r\n    <div className=\"mb-3\">\r\n        <label htmlFor=\"exampleFormControlTextarea\" className=\"my-5 form-label\" style={props.sstyle}>{props.title}</label>\r\n        <textarea style={props.sstyle} onChange={handleOnChange} className=\"form-control\" value={mytext} id=\"exampleFormControlTextarea\" rows=\"8\"></textarea>\r\n        <button disabled={mytext===''?true:false} type=\"button\" onClick={runmyFun}  className={`mx-2 my-3 btn btn-${props.btnclr}`}>Uppercase</button>\r\n        <button disabled={mytext===''?true:false} type=\"button\" onClick={convertoCap} className={`mx-2 my-3 btn btn-${props.btnclr}`}>Lowercase</button>\r\n        <button type=\"button\" disabled={mytext===''?true:false} onClick={removeSpace} className={`mx-2 my-3 btn btn-${props.btnclr}`}>Remove Space</button>\r\n        <button type=\"button\" disabled={mytext===''?true:false} onClick={handleClearText} className={`mx-2 my-3 btn btn-${props.btnclr}`}>Cleat text</button>\r\n       \r\n\r\n      </div>\r\n    <div className=\"container\" style={props.sstyle}>\r\n        <h1>Text Summary</h1>\r\n        <p>Number of characters: {mytext.replace(/\\s+/g, '').length} </p>\r\n        \r\n        <p>Number of words: {mytext.split(\" \").length} </p>\r\n        <h2>Preview</h2>\r\n        <p>{mytext} </p>\r\n    </div>\r\n     \r\n      </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\n//import Button from './components/Button';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Nav from './components/Nav';\nimport Service from './components/Service';\nimport './App.css';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from 'react-router-dom'\n\n\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [statusofMode, setstatusofMode] = useState('Dark mode off');\n  const [stastatusofText, setstatusofText] = useState('text-light');\n  const [btntitle, darkModeButtonText]= useState('Dark mode on');\n  const [myStyle, darkModeFun ]= useState({backgroundColor:\"white\", color:\"black\" });\n  const [alertMsg, setalertMsg] = useState(null);\n  const [chkmode, chkmodestate] = useState(false);\n  const [passclass, myclassname] = useState('')\n  const [addrootclass, addrootclassylw] = useState('')\n  const [funnameyellow, setyellow] = useState({backgroundColor:\"white\"});\n  const [btnColrs, buttoncolrs] = useState('primary');\n\n  const myfunnameyellow = () => {\n    if(funnameyellow.backgroundColor === 'white'){   \n      setyellow({backgroundColor:\"yellow\"});\n      chkmodestate(true);\n      myclassname('ylwclass');\n      addrootclassylw('rgylw');\n      document.body.style.backgroundColor = 'yellow';\n      darkModeButtonText(\"Yellow mode on\");\n      buttoncolrs('c13');\n    }\n    else{\n      setyellow({backgroundColor:\"white\"});\n      chkmodestate(false);\n      myclassname('');\n      addrootclassylw('');\n      document.body.style.backgroundColor = '';\n      darkModeButtonText(\"Yellow mode off\");\n      buttoncolrs('primary');\n    }\n  }\n\n  const showalert = (message,type) => {\n  setalertMsg({msg : message,type: type})\n  setTimeout(() => {setalertMsg(null);}, 1500); \n}\n  \n  const enableMymode = () => {\n     if(mode === 'light'){\n      setMode('dark');\n      setstatusofMode('Dark mode on');\n      setstatusofText('text-light');\n      document.body.style.backgroundColor = \"black\";\n      darkModeFun({ backgroundColor:\"black\", color:\"white\" });\n      darkModeButtonText(\"Dark mode on\");\n      showalert('drak mode has been enabled','success');\n      buttoncolrs('ccc');\n     }\n     else {\n      setMode('light');\n      setstatusofMode('Dark mode off');\n      setstatusofText('text-dark');\n      document.body.style.backgroundColor = \"white\";\n      darkModeFun({backgroundColor:\"white\",color:\"black\"});\n      darkModeButtonText(\"Dark mode off\");\n      showalert('drak mode has been disabled','success');\n      buttoncolrs('primary');\n     }\n   }\n\n   const clickonDrak = () => {\n    if(myStyle.color === \"black\"){\n        darkModeFun({\n\n         backgroundColor:\"black\",\n         color:\"white\"\n\n        });\n     \n        darkModeButtonText(\"Dark mode off\");\n        showalert('drak mode has been enabled');\n\n    }\n    else {\n     darkModeFun({\n\n         backgroundColor:\"white\",\n         color:\"black\"\n\n        });\n        darkModeButtonText(\"Dark mode on\");   \n        showalert('drak mode has been disabled');\n    }\n }\n\n  return (\n    // <Router>\n    <>\n    <Nav mode={mode} myfunname={enableMymode} darkmodestatus={statusofMode} textlight={stastatusofText} \n    enableyellow={myfunnameyellow} bkgcolr={funnameyellow} chk={chkmode} addcls={passclass} clsnm={addrootclass}/>\n    <Alert alertmsg={alertMsg} />\n    <div className={`container ${addrootclass}`}>\n    \n{/* \n   <Switch>\n  <Route exact path=\"/Service\" > */}\n  <Service title=\"Enter your text here\" sstyle={myStyle} showalert={showalert} clsnm={addrootclass} btnclr={btnColrs}/>\n  {/* </Route>\n\n  <Route exact path=\"/About\">\n  <About sstyle={myStyle} abtfun={clickonDrak} titlebtn={btntitle} mode={mode}/> */}\n\n  {/* </Route>\n\n   </Switch> */}\n   <About sstyle={myStyle} abtfun={clickonDrak} titlebtn={btntitle} mode={mode}/>\n</div>\n    </>\n  // </Router> \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}